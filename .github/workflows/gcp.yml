name: Build and Deploy to GKE

on:
  push:
    branches: [ "master" ]

env:
  PROJECT_ID: my-kubernetes-project-392907
  GAR_LOCATION: asia-south1
  REPOSITORY: google-kubernetes
  IMAGE: google-kubernetes-image
  GKE_CLUSTER: my-cluster
  GKE_LOCATION: asia-south1
  DEPLOYMENT_NAME: google-kubernetes

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Build Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Login to GAR
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      # Build the Docker image
      - name: Docker Build
        run: docker build . --file Dockerfile --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Publish the Docker image to Google Artifact Registry
      - name: Docker Publish
        run: docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      # Get the GKE credentials, so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: cat kubernetes/deployment.yaml | sed "s/__IMAGE__/$GAR_LOCATION-docker.pkg.dev\/$PROJECT_ID\/$REPOSITORY\/$IMAGE:$GITHUB_SHA/g" | kubectl apply -f - ; kubectl rollout status deployment/$DEPLOYMENT_NAME ; kubectl get services $DEPLOYMENT_NAME-service -o wide